<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>上传博客到npm，并分流到npm镜像提升速度，可绕备</title>
      <link href="/2022/12/09/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%88%B0npm%EF%BC%8C%E5%B9%B6%E5%88%86%E6%B5%81%E5%88%B0npm%E9%95%9C%E5%83%8F%E6%8F%90%E5%8D%87%E9%80%9F%E5%BA%A6/"/>
      <url>/2022/12/09/%E4%B8%8A%E4%BC%A0%E5%8D%9A%E5%AE%A2%E5%88%B0npm%EF%BC%8C%E5%B9%B6%E5%88%86%E6%B5%81%E5%88%B0npm%E9%95%9C%E5%83%8F%E6%8F%90%E5%8D%87%E9%80%9F%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前看过w03.cc的文章，但是他只是上传到npm并更改package.json里的代码，我也有对应的实现方法，见</p><p><a href="https://blog.abeginner.cn/2022/12/04/%E4%BD%BF%E7%94%A8%E5%A4%9A%E6%96%B9%E6%B3%95%E7%BB%99hexo%E5%8A%A0%E9%80%9F/">haor (abeginner.cn)</a></p><p>我是把package.json和cw配置项里的分流地址版本都改了，因为饿了么和其他国内的npm镜像基本都是回源有问题不能直接获取最新版本，只能靠指定版本使用，但是要注意的是，我之前那篇文章写的不详细，有一些小细节会出错，比如hexo配置要填写跳过cw的配置文件，和文件位置放的不正确，所以就有了这篇文章</p><h2 id="这里会说两种前端使用npm镜像的方式，一种是用sw，一种是用cw"><a href="#这里会说两种前端使用npm镜像的方式，一种是用sw，一种是用cw" class="headerlink" title="这里会说两种前端使用npm镜像的方式，一种是用sw，一种是用cw"></a>这里会说两种前端使用npm镜像的方式，一种是用sw，一种是用cw</h2><h1 id="首先，使用github-action上传博客到npm"><a href="#首先，使用github-action上传博客到npm" class="headerlink" title="首先，使用github action上传博客到npm"></a>首先，使用github action上传博客到npm</h1><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>要在上传之前在博客根目录的source目录下执行npm init来创建package.json</li><li>要设置好github action的npm源为官方源</li><li>要设置好secrets</li><li>把博客根目录除node_modules外的所有文件和文件夹上传到一个github仓库并在根目录创建.github/workflows/autopublish.yml</li><li>nodejs版本为16.x</li></ol><h2 id="我目前在用的代码"><a href="#我目前在用的代码" class="headerlink" title="我目前在用的代码"></a>我目前在用的代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">name: 自动部署</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  my_first_job:</span><br><span class="line">    name: my first job</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: 检查分支</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          ref: master</span><br><span class="line"></span><br><span class="line">      - name: 安装 Node</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: &quot;16.x&quot;</span><br><span class="line">          registry-url: https://registry.npmjs.org/</span><br><span class="line"></span><br><span class="line">      - name: 安装 Hexo</span><br><span class="line">        run: |</span><br><span class="line">          export TZ=&#x27;Asia/Shanghai&#x27;</span><br><span class="line">          npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">      - name: 缓存 Hexo</span><br><span class="line">        id: cache-npm</span><br><span class="line">        uses: actions/cache@v3</span><br><span class="line">        env:</span><br><span class="line">          cache-name: cache-node-modules</span><br><span class="line">        with:</span><br><span class="line">          path: node_modules</span><br><span class="line">          key: $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class="line">          restore-keys: |</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-build-</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-</span><br><span class="line"></span><br><span class="line">      - name: 安装依赖</span><br><span class="line">        if: $&#123;&#123; steps.cache-npm.outputs.cache-hit != &#x27;true&#x27; &#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          npm install --save</span><br><span class="line"></span><br><span class="line">      - name: 生成静态文件</span><br><span class="line">        run: |</span><br><span class="line">          hexo generate</span><br><span class="line"></span><br><span class="line">      - name: 推送到npm镜像</span><br><span class="line">        run: |</span><br><span class="line">          cd public</span><br><span class="line">          node npmversionupdata.js</span><br><span class="line">          npm publish</span><br><span class="line">        env:</span><br><span class="line">          NODE_AUTH_TOKEN: $&#123;&#123;secrets.npm_token&#125;&#125;</span><br><span class="line">  </span><br><span class="line">      - name: 部署到Github</span><br><span class="line">        uses: JamesIves/github-pages-deploy-action@v4</span><br><span class="line">        with:</span><br><span class="line">          token: $&#123;&#123;secrets.myblog_token&#125;&#125;</span><br><span class="line">          repository-name: lhr20080401/site</span><br><span class="line">          branch: main</span><br><span class="line">          folder: public</span><br><span class="line">          commit-message: &quot;Updated blog By Github Actions&quot;</span><br></pre></td></tr></table></figure><h2 id="使用到你自己的脚本里去"><a href="#使用到你自己的脚本里去" class="headerlink" title="使用到你自己的脚本里去"></a>使用到你自己的脚本里去</h2><p>在博客根目录创建.github/workflows/autopublish.yml</p><p>以下代码是上传文件到npm的关键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- name: 推送到npm镜像</span><br><span class="line">        run: |</span><br><span class="line">          cd public</span><br><span class="line">          node npmversionupdata.js</span><br><span class="line">          npm publish</span><br><span class="line">        env:</span><br><span class="line">          NODE_AUTH_TOKEN: $&#123;&#123;secrets.npm_token&#125;&#125;</span><br></pre></td></tr></table></figure><p>在此之前，在github action上安装nodejs的时候要特别注意</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: 安装 Node</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: &quot;16.x&quot;</span><br><span class="line">          registry-url: https://registry.npmjs.org/</span><br></pre></td></tr></table></figure><p>版本为16.x，源为官方源</p><p>在博客根目录的source创建npmversionupdata.js（注意gulp请不要打包它）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&#x27;fs&#x27;);</span><br><span class="line">var timestamp=new Date().getTime()</span><br><span class="line">function changeJson(timestamp)&#123;</span><br><span class="line">    fs.readFile(&#x27;package.json&#x27;,function(err,data)&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">        &#125;</span><br><span class="line">        var person = data.toString();</span><br><span class="line">        person = JSON.parse(person);</span><br><span class="line">        person.version = &quot;1.0.&quot; + timestamp</span><br><span class="line">        var str = JSON.stringify(person);</span><br><span class="line">        fs.writeFile(&#x27;package.json&#x27;,str,function(err)&#123;</span><br><span class="line">            if(err)&#123;</span><br><span class="line">                console.error(err);</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(&#x27;修改成功&#x27;);</span><br><span class="line">            console.log(person.version);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function changeconfig(timestamp) &#123;</span><br><span class="line">    fs.readFile(&#x27;config.yaml&#x27;,&#x27;utf8&#x27;,function(err,files)&#123;</span><br><span class="line">        var result = files.replace(/1.0.000919/g,&quot;1.0.&quot; + timestamp);</span><br><span class="line">        console.log(&quot;ok&quot;)</span><br><span class="line">        fs.writeFile(&#x27;config.yaml&#x27;, result, &#x27;utf8&#x27;, function (err) &#123;</span><br><span class="line">             if (err) return console.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">changeJson(timestamp)</span><br><span class="line">changeconfig(timestamp)</span><br></pre></td></tr></table></figure><p>这个文件就是用时间管理npm版本，防止npm重新提交版本和前端获取不到最新版本的问题</p><h2 id="注意第二个函数是给clientworker更改配置项分流地址的，需要你把分流地址写成这个样子-镜像站点-包名-1-0-000919注意000919不可变他就是靠正则替换这串数字"><a href="#注意第二个函数是给clientworker更改配置项分流地址的，需要你把分流地址写成这个样子-镜像站点-包名-1-0-000919注意000919不可变他就是靠正则替换这串数字" class="headerlink" title="注意第二个函数是给clientworker更改配置项分流地址的，需要你把分流地址写成这个样子:镜像站点/包名@1.0.000919注意000919不可变他就是靠正则替换这串数字"></a>注意第二个函数是给clientworker更改配置项分流地址的，需要你把分流地址写成这个样子:镜像站点/包名@1.0.000919注意000919不可变他就是靠正则替换这串数字</h2><h2 id="上传完建议直接push到另一个仓库，然后用你需要的服务绑定这个仓库（例如vercel）因为我们不可能让同样的代码在vercel之类的平台上再执行一遍，因为这样时间就不相同版本也不相同（靠时间截来控制版本），部署在他们上面的网站的分流链接就不是GitHub-action上传的版本了"><a href="#上传完建议直接push到另一个仓库，然后用你需要的服务绑定这个仓库（例如vercel）因为我们不可能让同样的代码在vercel之类的平台上再执行一遍，因为这样时间就不相同版本也不相同（靠时间截来控制版本），部署在他们上面的网站的分流链接就不是GitHub-action上传的版本了" class="headerlink" title="上传完建议直接push到另一个仓库，然后用你需要的服务绑定这个仓库（例如vercel）因为我们不可能让同样的代码在vercel之类的平台上再执行一遍，因为这样时间就不相同版本也不相同（靠时间截来控制版本），部署在他们上面的网站的分流链接就不是GitHub action上传的版本了"></a>上传完建议直接push到另一个仓库，然后用你需要的服务绑定这个仓库（例如vercel）因为我们不可能让同样的代码在vercel之类的平台上再执行一遍，因为这样时间就不相同版本也不相同（靠时间截来控制版本），部署在他们上面的网站的分流链接就不是GitHub action上传的版本了</h2><h1 id="使用service-worker分流到npm国内镜像"><a href="#使用service-worker分流到npm国内镜像" class="headerlink" title="使用service worker分流到npm国内镜像"></a>使用service worker分流到npm国内镜像</h1><p>在hexo根目录的source文件夹下创建sw.js（注意gulp请不要打包它）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">hostname = self.location.host;</span><br><span class="line">console.log(hostname);</span><br><span class="line">// 在 service worker 中监听 fetch 事件</span><br><span class="line">self.addEventListener(&#x27;fetch&#x27;, function(event) &#123;</span><br><span class="line">  if (event.request.url.indexOf(hostname) !== -1) &#123;</span><br><span class="line">    var url = new URL(event.request.url);</span><br><span class="line">    url.protocol = &quot;https&quot;;</span><br><span class="line">    url.hostname = &quot;npm.elemecdn.com&quot;;</span><br><span class="line">    url.port = &quot;&quot;;</span><br><span class="line">    var path = url.pathname;</span><br><span class="line">    url.pathname = &quot;你的博客镜像包名@1.0.000919&quot; + path;</span><br><span class="line">    console.log(url);</span><br><span class="line">    var url = url.toString();</span><br><span class="line">    console.log(url);</span><br><span class="line">    let options = &#123;</span><br><span class="line">      redirect: &#x27;follow&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">    let request = new Request(url, options);</span><br><span class="line">    event.respondWith(fetch(request));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时候npmversionupdata.js的代码应该为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&#x27;fs&#x27;);</span><br><span class="line">var timestamp=new Date().getTime()</span><br><span class="line">function changeJson(timestamp)&#123;</span><br><span class="line">    fs.readFile(&#x27;package.json&#x27;,function(err,data)&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">        &#125;</span><br><span class="line">        var person = data.toString();</span><br><span class="line">        person = JSON.parse(person);</span><br><span class="line">        person.version = &quot;1.0.&quot; + timestamp</span><br><span class="line">        var str = JSON.stringify(person);</span><br><span class="line">        fs.writeFile(&#x27;package.json&#x27;,str,function(err)&#123;</span><br><span class="line">            if(err)&#123;</span><br><span class="line">                console.error(err);</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(&#x27;修改成功&#x27;);</span><br><span class="line">            console.log(person.version);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function changejs(timestamp) &#123;</span><br><span class="line">    fs.readFile(&#x27;sw.js&#x27;,&#x27;utf8&#x27;,function(err,files)&#123;</span><br><span class="line">        var result = files.replace(/1.0.000919/g,&quot;1.0.&quot; + timestamp);</span><br><span class="line">        console.log(&quot;ok&quot;)</span><br><span class="line">        fs.writeFile(&#x27;sw.js&#x27;, result, &#x27;utf8&#x27;, function (err) &#123;</span><br><span class="line">             if (err) return console.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">changeJson(timestamp)</span><br><span class="line">changejs(timestamp)</span><br></pre></td></tr></table></figure><p>然后我们为了启用sw.js我们需要在要使用的页面插入以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">navigator.serviceWorker.getRegistration().then(function(registration) &#123;</span><br><span class="line">  if (registration) &#123;</span><br><span class="line">    // Service worker is already registered</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    // Service worker is not registered, so we need to register it</span><br><span class="line">    navigator.serviceWorker.register(&#x27;/sw.js&#x27;)</span><br><span class="line">      .then(function(registration) &#123;</span><br><span class="line">        window.location.reload();</span><br><span class="line">        // Service worker is now registered</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>你可以自己创建一个js并引入（通过hexo官方的api）最好是插入到每个页面的最前面这样效果更好注册器例如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.injector.register(entry, value, to)</span><br></pre></td></tr></table></figure><p>官方链接：<a href="https://hexo.io/zh-cn/api/injector">注入器（Injector） | Hexo</a></p><h1 id="通过clientworker分流到npm国内镜像（推荐）"><a href="#通过clientworker分流到npm国内镜像（推荐）" class="headerlink" title="通过clientworker分流到npm国内镜像（推荐）"></a>通过clientworker分流到npm国内镜像（推荐）</h1><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><h3 id="我自用的"><a href="#我自用的" class="headerlink" title="我自用的"></a>我自用的</h3><p>在博客根目录的source文件夹下创建config.yaml（hexo要跳过编译此文件）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">name: ClientWorker Docs Config</span><br><span class="line">cleaninterval: 1000*20 # 每20秒检测并清理一次</span><br><span class="line"></span><br><span class="line">catch_rules: #转换规则</span><br><span class="line">    - rule: _ #ClientWorker语法糖，匹配当前域，返回一个域名带端口</span><br><span class="line">      transform_rules: #转换规则，最上面的优先最高</span><br><span class="line">        - search: \#.* #在发送请求时匹配#后内容并移除</span><br><span class="line">          replace: &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">        - search: \?.* #在发送请求时匹配?后内容并移除，仅限静态请求</span><br><span class="line">          replace: &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">        - search: ([^\/.]+)\/$</span><br><span class="line">          replace: $1/index.html</span><br><span class="line">  </span><br><span class="line">        - search: _ </span><br><span class="line">          replace: </span><br><span class="line">          - _ </span><br><span class="line">          - npm.elemecdn.com/你的npm分流包名称@1.0.000919</span><br><span class="line">          - npm.sourcegcdn.com/你的npm分流包名称@1.0.000919</span><br><span class="line">          - blogcf.abeginner.cn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        - search: haorblog\.adhy\.cc</span><br><span class="line">          action: skip</span><br><span class="line"></span><br><span class="line">        - search: https:\/\/blog.abeginner.cn\/false</span><br><span class="line">          action: return</span><br><span class="line">          redirect: </span><br><span class="line">            status: 404</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        - search: \.html$</span><br><span class="line">          header:</span><br><span class="line">            Content-Type: text/html;charset=UTF-8 #修复标头</span><br><span class="line"></span><br><span class="line">        - search: _</span><br><span class="line">          action: fetch</span><br><span class="line">          fetch:</span><br><span class="line">            status: 200</span><br><span class="line">            engine: parallel</span><br><span class="line">            preflight: false</span><br><span class="line">            timeout: 5000</span><br><span class="line">            cache:</span><br><span class="line">              expire: 1000*60*60*8</span><br><span class="line">              delay: 200</span><br></pre></td></tr></table></figure><h3 id="调试出你自己的"><a href="#调试出你自己的" class="headerlink" title="调试出你自己的"></a>调试出你自己的</h3><p>官方文档：<a href="https://clientworker.js.org/start.html">快速开始 | ClientWorker</a></p><h2 id="载入clientworker"><a href="#载入clientworker" class="headerlink" title="载入clientworker"></a>载入clientworker</h2><p>去官方网址下载压缩包，官方链接：<a href="https://github.com/ChenYFan/ClientWorker/releases">https://github.com/ChenYFan/ClientWorker/releases</a></p><p>拷贝其中的cw.js到hexo根目录的source文件夹下，为了避免不必要的错误，gulp请不要打包它</p><h2 id="引用cw"><a href="#引用cw" class="headerlink" title="引用cw"></a>引用cw</h2><p>官方开始文档：<a href="https://clientworker.js.org/start.html#step-3-%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85%E4%BB%A3%E7%A0%81-%E6%9C%80%E5%90%8E%E4%B8%80%E6%AD%A5%E4%BA%86%EF%BC%8C%E5%8A%A0%E6%B2%B9%EF%BC%81">快速开始 | ClientWorker</a></p><p>选择自己的引入方式可以直接通过主题的配置文件插入也可以单独写一个js并用hexo的api引入</p><p>hexoapi官方文档：<a href="https://hexo.io/zh-cn/api/injector">注入器（Injector） | Hexo</a></p><h2 id="自动更新npm版本"><a href="#自动更新npm版本" class="headerlink" title="自动更新npm版本"></a>自动更新npm版本</h2><p>使用文章开头的npmversionupdata.js就行了</p><h1 id="可能遇到的错误"><a href="#可能遇到的错误" class="headerlink" title="可能遇到的错误"></a>可能遇到的错误</h1><ol><li>文件位置没有放正确</li><li>文件名不对（你可以根据自己的需要更改文件名，他们之间有依赖关系）</li><li>node版本不正确和npm源问题</li><li>github action脚本缩进问题</li></ol><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>这样你就可以得到一个快速的，相当于免费使用国内服务器的博客啦，希望这篇博客能对你有帮助</p><p>谢谢阅读，如果有问题可以在评论区评论</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用多方法给hexo加速</title>
      <link href="/2022/12/04/%E4%BD%BF%E7%94%A8%E5%A4%9A%E6%96%B9%E6%B3%95%E7%BB%99hexo%E5%8A%A0%E9%80%9F/"/>
      <url>/2022/12/04/%E4%BD%BF%E7%94%A8%E5%A4%9A%E6%96%B9%E6%B3%95%E7%BB%99hexo%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<p>在主题的script文件夹创建modify.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">const &#123; filter &#125; = hexo.extend;</span><br><span class="line"></span><br><span class="line">// 替换 CDN</span><br><span class="line">filter.register(&#x27;before_generate&#x27;, () =&gt; &#123;</span><br><span class="line">    const &#123; asset &#125; = hexo.theme.config;</span><br><span class="line">    for (const name in asset) &#123;</span><br><span class="line">        asset[name] = asset[name].replace(&#x27;//cdn.jsdelivr.net/npm/&#x27;, &#x27;//npm.elemecdn.com/&#x27;);</span><br><span class="line">        asset[name] = asset[name].replace(&#x27;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-double-row-display@1.00/cardlistpost.min.css&#x27;, &#x27;https://haorblog.adhy.cc/blogimg/cardlistpost.min.css&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, 11);</span><br><span class="line"></span><br><span class="line">//通用注入器</span><br><span class="line">//name 注入插件名称</span><br><span class="line">//item_comfig 注入插件的配置名</span><br><span class="line">//temple_html_text 注入插件的挂载html模板(带有用户自定义的html/js/css)</span><br><span class="line">//js_text 注入js</span><br><span class="line">//css_text 注入css</span><br><span class="line"></span><br><span class="line">function common_injector(name, item_comfig, temple_html_text, js_text, css_text) &#123;</span><br><span class="line">    if (item_comfig.enable) &#123;</span><br><span class="line">        if (temple_html_text !== &#x27;&#x27;) &#123;</span><br><span class="line">            var layout_name;</span><br><span class="line">            var layout_type;</span><br><span class="line">            var layout_index = 0;</span><br><span class="line">            if (item_comfig.layout_id) &#123;</span><br><span class="line">                layout_name = item_comfig.layout_id;</span><br><span class="line">                layout_type = &#x27;id&#x27;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                layout_name = item_comfig.layout.name;</span><br><span class="line">                layout_type = item_comfig.layout.type;</span><br><span class="line">                layout_index = item_comfig.layout.index;</span><br><span class="line">            &#125;</span><br><span class="line">            var get_layout</span><br><span class="line">            if (layout_type === &#x27;class&#x27;) &#123;</span><br><span class="line">                get_layout = `document.getElementsByClassName(&#x27;$&#123;layout_name&#125;&#x27;)[$&#123;layout_index&#125;]`</span><br><span class="line">            &#125; else if (layout_type === &#x27;id&#x27;) &#123;</span><br><span class="line">                get_layout = `document.getElementById(&#x27;$&#123;layout_name&#125;&#x27;)`</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                get_layout = `document.getElementById(&#x27;$&#123;layout_name&#125;&#x27;)`</span><br><span class="line">            &#125;</span><br><span class="line">            var user_info_js = `&lt;script data-pjax&gt;function $&#123;name&#125;_injector_config()&#123;</span><br><span class="line">                var parent_div_git = $&#123;get_layout&#125;;</span><br><span class="line">                var item_html = &#x27;$&#123;temple_html_text&#125;&#x27;;</span><br><span class="line">                console.log(&#x27;已挂载$&#123;name&#125;&#x27;)</span><br><span class="line">                // parent_div_git.innerHTML=item_html+parent_div_git.innerHTML // 无报错，但不影响使用(支持pjax跳转)</span><br><span class="line">                parent_div_git.insertAdjacentHTML(&quot;afterbegin&quot;,item_html) // 有报错，但不影响使用(支持pjax跳转)</span><br><span class="line">            &#125;if( $&#123;get_layout&#125; &amp;&amp; location.pathname ===&#x27;$&#123;item_comfig.enable_page&#125;&#x27;)&#123;</span><br><span class="line"></span><br><span class="line">            common_injector_config()</span><br><span class="line">        &#125; &lt;/script&gt;`</span><br><span class="line">        &#125;</span><br><span class="line">        hexo.extend.injector.register(&#x27;body_end&#x27;, user_info_js, &quot;default&quot;);</span><br><span class="line">        if (js_text !== &#x27;&#x27;) &#123;</span><br><span class="line">            hexo.extend.injector.register(&#x27;body_end&#x27;, js_text, &quot;default&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (css_text !== &#x27;&#x27;) &#123;</span><br><span class="line">            hexo.extend.injector.register(&#x27;head_end&#x27;, css_text, &quot;default&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(&#x27;after_generate&#x27;,function() &#123;</span><br><span class="line">    if(hexo.config.butterfly_article_double_row_new.enable)&#123;</span><br><span class="line">        var butterfly_article_double_row_comfig = hexo.config.butterfly_article_double_row_new;</span><br><span class="line">        var css_text =`&lt;link rel=&quot;stylesheet&quot; href=&quot;https://haorblog.adhy.cc/blogimg/cardlistpost.min.css&quot;/&gt;</span><br><span class="line">&lt;style&gt;#recent-posts &gt; .recent-post-item &gt;.recent-post-info &gt; .article-meta-wrap &gt; .tags:before &#123;content:&quot;\\A&quot;;</span><br><span class="line">  white-space: pre;&#125;#recent-posts &gt; .recent-post-item &gt;.recent-post-info &gt; .article-meta-wrap &gt; .tags &gt; .article-meta__separator&#123;display:none&#125;&lt;/style&gt;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line">        common_injector(&#x27;butterfly_article_double_row&#x27;, butterfly_article_double_row_comfig, &#x27;&#x27;, &#x27;&#x27;, css_text)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">const js = hexo.extend.helper.get(&#x27;js&#x27;).bind(hexo);</span><br><span class="line">hexo.extend.injector.register(&#x27;head_begin&#x27;, () =&gt; &#123;return js(&#x27;/js/clientworker.js&#x27;);&#125;);</span><br><span class="line">hexo.extend.injector.register(&#x27;head_begin&#x27;, () =&gt; &#123;return js(&#x27;/js/autoupdate.js&#x27;);&#125;);</span><br></pre></td></tr></table></figure><p>中间那一段是为了指定cardlistpost的链接因为我用的是qexo所以编译都是在vercel github cloudflare进行的，我没有办法指定他的css引入链接于是就重写到这里来了</p><p>在博客根目录_config.yml做以下修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">butterfly_article_double_row:</span><br><span class="line">  enable: false</span><br><span class="line">butterfly_article_double_row_new:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><p>然后就是指定某些依赖项的链接（对于butterfly主题，主题的_config.yml做以下更改）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">CDN:</span><br><span class="line">  # The CDN provider of internal scripts (主題內部 js 的 cdn 配置)</span><br><span class="line">  # option: local/jsdelivr/unpkg/cdnjs/custom</span><br><span class="line">  # Dev version can only choose. ( dev版的主題只能設置為 local )</span><br><span class="line">  internal_provider: local</span><br><span class="line"></span><br><span class="line">  # The CDN provider of third party scripts (第三方 js 的 cdn 配置)</span><br><span class="line">  # option: local/jsdelivr/unpkg/cdnjs/custom</span><br><span class="line">  # when set it to local, you need to install hexo-butterfly-extjs</span><br><span class="line">  third_party_provider: jsdelivr</span><br><span class="line"></span><br><span class="line">  # Add version number to CDN, true or false  </span><br><span class="line">  version: false</span><br><span class="line"></span><br><span class="line">  # Custom format</span><br><span class="line">  # For example: https://cdn.staticfile.org/$&#123;cdnjs_name&#125;/$&#123;version&#125;/$&#123;min_cdnjs_file&#125;</span><br><span class="line">  custom_format:</span><br><span class="line"></span><br><span class="line">  option:</span><br><span class="line">    jquery: https://haorblog.adhy.cc/blogimg/jquery.min.js</span><br><span class="line">    pjax: https://haorblog.adhy.cc/blogimg/pjax.min.js</span><br><span class="line">    lazyload: https://haorblog.adhy.cc/blogimg/lazyload.iife.min.js</span><br><span class="line">    instantpage: https://haorblog.adhy.cc/blogimg/instantpage.min.js</span><br><span class="line">    fontawesomeV6: https://cdn.staticfile.org/font-awesome/6.2.0/css/all.min.css #https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/font-awesome/6.0.0/css/all.min.css</span><br><span class="line">    snackbar_css: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/node-snackbar/0.1.16/snackbar.min.css</span><br><span class="line">    snackbar: https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/node-snackbar/0.1.16/snackbar.min.js</span><br><span class="line">    fancybox_css_v4: https://haorblog.adhy.cc/blogimg/fancybox.min.css</span><br><span class="line">    fancybox_v4: https://haorblog.adhy.cc/blogimg/fancybox.umd.min.js</span><br><span class="line">    countup_js: /js/countup.js</span><br></pre></td></tr></table></figure><p>然后给你的博客配置上clientworker（基于service worker的一个模块）来颗粒化控制缓存还有前端并发</p><p>在博客source文件夹下按照clientworker.js.org里写的放入cw.js还有config.yaml在主题的source/js下放入autoupdate.js</p><p>以及clientworker.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">if (!!navigator.serviceWorker) &#123;</span><br><span class="line">    if (localStorage.getItem(&#x27;cw_installed&#x27;) !== &#x27;true&#x27;) &#123;window.stop();&#125;</span><br><span class="line">    navigator.serviceWorker.register(&#x27;/cw.js?t=&#x27; + new Date().getTime()).then(async (registration) =&gt; &#123;</span><br><span class="line">        if (localStorage.getItem(&#x27;cw_installed&#x27;) !== &#x27;true&#x27;) &#123;</span><br><span class="line">            const conf = () =&gt; &#123;</span><br><span class="line">                console.log(&#x27;[CW] Installing Success,Configuring...&#x27;);</span><br><span class="line">                fetch(&#x27;/cw-cgi/api?type=config&#x27;)</span><br><span class="line">                    .then(res =&gt; res.text())</span><br><span class="line">                    .then(text =&gt; &#123;</span><br><span class="line">                        if (text === &#x27;ok&#x27;) &#123;</span><br><span class="line">                            console.log(&#x27;[CW] Installing Success,Configuring Success,Starting...&#x27;);</span><br><span class="line">                            localStorage.setItem(&#x27;cw_installed&#x27;, &#x27;true&#x27;);</span><br><span class="line">                            window.location.reload();</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            console.warn(&#x27;[CW] Installing Success,Configuring Failed,Sleeping 200ms...&#x27;);</span><br><span class="line">                            setTimeout(() =&gt; &#123;</span><br><span class="line">                                conf()</span><br><span class="line">                            &#125;, 200);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).catch(err =&gt; &#123;</span><br><span class="line">                        console.log(&#x27;[CW] Installing Success,Configuring Error,Exiting...&#x27;);</span><br><span class="line">                    &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                conf()</span><br><span class="line">            &#125;, 50);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).catch(err =&gt; &#123;</span><br><span class="line">        console.error(&#x27;[CW] Installing Failed,Error: &#x27; + err.message);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125; else &#123; console.error(&#x27;[CW] Installing Failed,Error: Browser not support service worker&#x27;); &#125;</span><br></pre></td></tr></table></figure><p>引入这两个文件的代码在modify.js的最后两行可以根据自己的路径更改</p><p>cw的配置文件（自用）</p><p>config.yaml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">catch_rules: #转换规则</span><br><span class="line">    - rule: _ #ClientWorker语法糖，匹配当前域，返回一个域名带端口</span><br><span class="line">      transform_rules: #转换规则，最上面的优先最高</span><br><span class="line">        - search: \#.* #在发送请求时匹配#后内容并移除</span><br><span class="line">          replace: &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">        - search: \?.* #在发送请求时匹配?后内容并移除，仅限静态请求</span><br><span class="line">          replace: &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">        - search: ([^\/.]+)\/$</span><br><span class="line">          replace: $1/index.html</span><br><span class="line">  </span><br><span class="line">        - search: _ </span><br><span class="line">          replace: </span><br><span class="line">          - _ </span><br><span class="line">          - npm.elemecdn.com/haor-blog-main</span><br><span class="line">          - blogcf.abeginner.cn</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        - search: haorblog\.adhy\.cc</span><br><span class="line">          action: skip</span><br><span class="line"></span><br><span class="line">        - search: https:\/\/blog.abeginner.cn\/false</span><br><span class="line">          action: return</span><br><span class="line">          redirect: </span><br><span class="line">            status: 404</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        - search: \.html$</span><br><span class="line">          header:</span><br><span class="line">            Content-Type: text/html;charset=UTF-8 #修复标头</span><br><span class="line"></span><br><span class="line">        - search: _</span><br><span class="line">          action: fetch</span><br><span class="line">          fetch:</span><br><span class="line">            status: 200</span><br><span class="line">            engine: parallel</span><br><span class="line">            preflight: false</span><br><span class="line">            timeout: 5000</span><br><span class="line">            cache:</span><br><span class="line">              expire: 1000*60*60*8</span><br><span class="line">              delay: 200</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果你不上传博客代码到npm可以把中间的npm.elemecdn.com/haor-blog-main去掉</p><h1 id="使用github-action上传博客源码到npm"><a href="#使用github-action上传博客源码到npm" class="headerlink" title="使用github action上传博客源码到npm"></a>使用github action上传博客源码到npm</h1><p>在博客根目录创建.github/workflows/autopublish.yml注意是.github</p><p>代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">name: 自动部署</span><br><span class="line"></span><br><span class="line">on:</span><br><span class="line">  push:</span><br><span class="line">    branches:</span><br><span class="line">      - master</span><br><span class="line"></span><br><span class="line">jobs:</span><br><span class="line">  my_first_job:</span><br><span class="line">    name: my first job</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">      - name: 检查分支</span><br><span class="line">        uses: actions/checkout@v2</span><br><span class="line">        with:</span><br><span class="line">          ref: master</span><br><span class="line"></span><br><span class="line">      - name: 安装 Node</span><br><span class="line">        uses: actions/setup-node@v1</span><br><span class="line">        with:</span><br><span class="line">          node-version: &quot;16.x&quot;</span><br><span class="line">          registry-url: https://registry.npmjs.org/</span><br><span class="line"></span><br><span class="line">      - name: 安装 Hexo</span><br><span class="line">        run: |</span><br><span class="line">          export TZ=&#x27;Asia/Shanghai&#x27;</span><br><span class="line">          npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">      - name: 缓存 Hexo</span><br><span class="line">        id: cache-npm</span><br><span class="line">        uses: actions/cache@v3</span><br><span class="line">        env:</span><br><span class="line">          cache-name: cache-node-modules</span><br><span class="line">        with:</span><br><span class="line">          path: node_modules</span><br><span class="line">          key: $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-$&#123;&#123; hashFiles(&#x27;**/package-lock.json&#x27;) &#125;&#125;</span><br><span class="line">          restore-keys: |</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-build-$&#123;&#123; env.cache-name &#125;&#125;-</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-build-</span><br><span class="line">            $&#123;&#123; runner.os &#125;&#125;-</span><br><span class="line"></span><br><span class="line">      - name: 安装依赖</span><br><span class="line">        if: $&#123;&#123; steps.cache-npm.outputs.cache-hit != &#x27;true&#x27; &#125;&#125;</span><br><span class="line">        run: |</span><br><span class="line">          npm install --save</span><br><span class="line"></span><br><span class="line">      - name: 生成静态文件</span><br><span class="line">        run: |</span><br><span class="line">          hexo generate</span><br><span class="line"></span><br><span class="line">      - name: 推送到npm镜像</span><br><span class="line">        run: |</span><br><span class="line">          cd public</span><br><span class="line">          node npmversionupdata.js</span><br><span class="line">          npm publish</span><br><span class="line">        env:</span><br><span class="line">          NODE_AUTH_TOKEN: $&#123;&#123;secrets.npm_token&#125;&#125;</span><br></pre></td></tr></table></figure><p>然后在仓库里添加<code>secrets</code>：NPM_TOKEN值为你自己的npm_token</p><h2 id="解决npm覆盖版本报错的问题"><a href="#解决npm覆盖版本报错的问题" class="headerlink" title="解决npm覆盖版本报错的问题"></a>解决npm覆盖版本报错的问题</h2><p>在博客source目录运行npm init生成package.json版本随便</p><p>然后在source目录创建npmversionupdata.js使用时间控制你的npm包版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&#x27;fs&#x27;);</span><br><span class="line">var timestamp=new Date().getTime()</span><br><span class="line">function changeJson(timestamp)&#123;</span><br><span class="line">    fs.readFile(&#x27;package.json&#x27;,function(err,data)&#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">        &#125;</span><br><span class="line">        var person = data.toString();</span><br><span class="line">        person = JSON.parse(person);</span><br><span class="line">        person.version = &quot;1.0.&quot; + timestamp</span><br><span class="line">        var str = JSON.stringify(person);</span><br><span class="line">        fs.writeFile(&#x27;package.json&#x27;,str,function(err)&#123;</span><br><span class="line">            if(err)&#123;</span><br><span class="line">                console.error(err);</span><br><span class="line">            &#125;</span><br><span class="line">            console.log(&#x27;修改成功&#x27;);</span><br><span class="line">            console.log(person.version);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">function changeconfig(timestamp) &#123;</span><br><span class="line">    fs.readFile(&#x27;config.yaml&#x27;,&#x27;utf8&#x27;,function(err,files)&#123;</span><br><span class="line">        var result = files.replace(/1.0.000919/g,&quot;1.0.&quot; + timestamp);</span><br><span class="line">        console.log(&quot;ok&quot;)</span><br><span class="line">        fs.writeFile(&#x27;config.yaml&#x27;, result, &#x27;utf8&#x27;, function (err) &#123;</span><br><span class="line">             if (err) return console.log(err);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br><span class="line">changeJson(timestamp)</span><br><span class="line">changeconfig(timestamp)</span><br></pre></td></tr></table></figure><p>然后在cw的配置项里把blogcf.abeginner.cn和npm.elemecdn.com的那个换成你的分流站和自己的npm包镜像地址</p><p>无了………</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vercel部署yesplaymusic报错解决</title>
      <link href="/2022/11/30/30/"/>
      <url>/2022/11/30/30/</url>
      
        <content type="html"><![CDATA[<h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><p>error @achrinza/node-<a href="https://link.juejin.cn/?target=mailto:ipc@9.2.2" title="mailto:ipc@9.2.2">ipc@9.2.2</a>: The engine “node” is incompatible with this module. Expected version “8 || 10 || 12 || 14 || 16 || 17”. Got “18.9.0”</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>该项目环境不支持<code>node@18.9.0</code>版本，需要降级到 <strong>8 || 10 || 12 || 14 || 16 || 17</strong> 版本</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>回到你的vercel控制面板，打开刚刚部署报错的yesplaymusic项目，点setting-&gt;general-&gt;Node.js Version 选择16.x</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vercel电信的线路又断断续续五分钟</title>
      <link href="/2022/11/23/vercel%E5%8F%88%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86/"/>
      <url>/2022/11/23/vercel%E5%8F%88%E5%87%BA%E9%97%AE%E9%A2%98%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>就在今天下午八点左右，我部署在vercel上的博客又无法访问了（我是电信网）itdog测试后发现还是只有电信不稳定</p><p><a href="https://imgse.com/i/z8Tuzn"><img src="https://s1.ax1x.com/2022/11/23/z8Tuzn.png" alt="z8Tuzn.png"></a><br><a href="https://imgse.com/i/z8TnRs"><img src="https://s1.ax1x.com/2022/11/23/z8TnRs.png" alt="z8TnRs.png"></a></p><p>联通移动都没有问题，还是只持续了五分钟左右</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用cloudflare pages搭建你的博客</title>
      <link href="/2022/11/23/2022112302/"/>
      <url>/2022/11/23/2022112302/</url>
      
        <content type="html"><![CDATA[<p>cloudflare推出了一项新的服务cloudflare pages（感觉最近cloudflare上新好快😃 ）他可以直接上传静态文件，也可以git你的github仓库之类的，网上用它直接上传文件搭建博客的教程有很多，但是cloudflare这么人性化的厂商，那么多的功能，直接上传文件搭建博客的，未免有点小题大做了，刚好先前我的博客是搭建在vercel的，还使用了qexo，上传文章还会自动部署，随时随地写文章，非常的人性化🙂 ，然后我就想到，cloudflare也会自动部署，还能执行自定义命令，虽然他的预设框架里没有hexo，但是我们可以使用自定义命令让他支持hexo，首先，像qexo部署博客一样上传那三个最重要的文件夹还有其他东西，上传到github然后绑定仓库，这里就不细说了，不会的可以去看qexo作者啊不都的文章，然后打开设置调整为下图所示的样子</p><p><img src="https://haorblog.adhy.cc/blogimg/cfhexo03.PNG"></p><p>分支就是你代码所在的分支</p><p>构建命令：<code>npm install hexo@5.4.2 -g;npm install;hexo g</code></p><p>构建输出目录：<code>public</code></p><p>这样你一用qexo写文章vercel会自动部署，cloudflare也会啦，可以拿cloudflare当个备站，因为vercel最近老师不稳定</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我发现一件很神奇的事情,hexo@6.3.0部署我现在版本的博客会出错</title>
      <link href="/2022/11/23/2022112301/"/>
      <url>/2022/11/23/2022112301/</url>
      
        <content type="html"><![CDATA[<p>我在cloudflare pages上部署hexo的时候，原先是直接执行<code>npm intsall hexo -g</code>安装hexo的，但是他这时默认安装的就是最新版本<code>6.3.0</code>然后部署我现在的博客就会有一大堆错误，如图</p><p><img src="https://haorblog.adhy.cc/blogimg/cfhexo.PNG"></p><p><img src="https://haorblog.adhy.cc/blogimg/cfhexo01.PNG"></p><p>（看侧边的滚动条就知道报了多少错）可以显示index.html但是点进去文章啥也没有（看过控制台，就是没渲染post），主题是butterfly（魔改过的）他提示post.styl错误，但是我回退版本至<code>5.4.2</code>就不会报错了，可能是因为版本太高了不支持？，日后再看看，现在记录一下我在云ide正常使用的hexo各项版本<code>hexo v</code>显示的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hexo-cli: 4.3.0</span><br><span class="line">os: linux 4.19.126-1.jdcloud.x86_64 Ubuntu 20.04.4 LTS (Focal Fossa)</span><br><span class="line">node: 16.16.0</span><br><span class="line">v8: 9.4.146.24-node.21</span><br><span class="line">uv: 1.43.0</span><br><span class="line">zlib: 1.2.11</span><br><span class="line">brotli: 1.0.9</span><br><span class="line">ares: 1.18.1</span><br><span class="line">modules: 93</span><br><span class="line">nghttp2: 1.47.0</span><br><span class="line">napi: 8</span><br><span class="line">llhttp: 6.0.7</span><br><span class="line">openssl: 1.1.1q+quic</span><br><span class="line">cldr: 40.0</span><br><span class="line">icu: 70.1</span><br><span class="line">tz: 2021a3</span><br><span class="line">unicode: 14.0</span><br><span class="line">ngtcp2: 0.1.0-DEV</span><br><span class="line">nghttp3: 0.1.0-DEV</span><br></pre></td></tr></table></figure><p>ide是csdn的，现在去领取还能免费给你一年，就是去gitcode（csdn自己搞得类似gitee,github之类的东西）做一个非常easy的fork操作</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vercel不知怎么了最近老是不稳定</title>
      <link href="/2022/11/22/vercel%E4%B8%8D%E7%9F%A5%E6%80%8E%E4%B9%88%E4%BA%86%E6%9C%80%E8%BF%91%E8%80%81%E6%98%AF%E4%B8%8D%E7%A8%B3%E5%AE%9A/"/>
      <url>/2022/11/22/vercel%E4%B8%8D%E7%9F%A5%E6%80%8E%E4%B9%88%E4%BA%86%E6%9C%80%E8%BF%91%E8%80%81%E6%98%AF%E4%B8%8D%E7%A8%B3%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>从昨天晚上凌晨一点多左右，发现我的网站突然访问不了了，然后用itdog测试了一下，发现电信的节点濒临崩溃，基本上都是丢包百分之百 而联通移动则没有问题，就在中午又发生了一次，同样是联通移动没有问题，因为vercel是anycast节点，同一节点解析到联通移动都没有问题，整个过程只持续了五分钟便恢复了正常，应该不是被攻击</p>]]></content>
      
      
      <categories>
          
          <category> 闲得无聊 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>用qexo上传文章的时候文件名重和了，导致我直接损失一篇文章</title>
      <link href="/2022/11/22/post/"/>
      <url>/2022/11/22/post/</url>
      
        <content type="html"><![CDATA[<p>记一次错误，一次写文章的时候，文章的文件名跟我之前发布的一篇文章的文件名字重合了，本以为他会加个（2）之类的，结果他直接把我之前那篇文章覆盖了，辛亏vercel还能找到以前的推送</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决butterfly访问速度慢的问题</title>
      <link href="/2022/11/22/1/"/>
      <url>/2022/11/22/1/</url>
      
        <content type="html"><![CDATA[<p>原先我觉得我博客慢是因为我的源站延迟高，带宽小，因为没备案的缘故使用不了国内的cdn，我也没办法备案，之前也用过vercel，感觉速度还是慢，于是我打开控制台仔细琢磨了一下，发现butterfly有大量的依赖，那些依赖的源都是jsdelivr的，之前确实挺快的，但是现在jsdelivr的备案掉了，国内访问会被指向国外的节点，因为绕路的原因，速度并不好，于是我就去网上找了更改这些依赖链接的方法，这是我更改后的速度</p><p><img src="https://haorblog.adhy.cc/blogimg/11111.PNG" alt="11111.PNG"></p><p>访客看到加载动画结束后的画面大概一秒多，源站是vercel的，还可以部署个qexo随时随地写文章</p><h1 id="个别项更改"><a href="#个别项更改" class="headerlink" title="个别项更改"></a>个别项更改</h1><p>修改主题配置文件，找到cdn的option这一项改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">option:</span><br><span class="line">    pjax: https://lib.baomitu.com/pjax/0.2.8/pjax.min.js</span><br><span class="line">    lazyload: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/vanilla-lazyload/17.3.1/lazyload.iife.min.js</span><br><span class="line">    instantpage: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/instant.page/5.1.0/instantpage.min.js</span><br><span class="line">    fontawesomeV6: https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/font-awesome/6.0.0/css/all.min.css</span><br><span class="line">    snackbar_css: https://lf3-cdn-tos.bytecdntp.com/cdn/expire-1-M/node-snackbar/0.1.16/snackbar.min.css</span><br><span class="line">    snackbar: https://lf6-cdn-tos.bytecdntp.com/cdn/expire-1-M/node-snackbar/0.1.16/snackbar.min.js</span><br></pre></td></tr></table></figure><p><code>fancybox_css_v4</code>和<code>fancybox_v4</code>需要自己访问jsdelivr下载上传到自己的cdn上格式跟上面一样（老的butterfly写fancybox，我的是4.5的所以写fancybox_v4），接下来就是批量的把其他的jsdelivr链接改为饿了么的cdn（虽然我也不知道为什么饿了么会有这个cdn，网上找到的）</p><p>在主题的script文件夹下新建一个js文件，名字随便代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&#x27;use strict&#x27;;</span><br><span class="line">const &#123; filter &#125; = hexo.extend;</span><br><span class="line"></span><br><span class="line">// 替换 CDN</span><br><span class="line">filter.register(&#x27;before_generate&#x27;, () =&gt; &#123;</span><br><span class="line">    const &#123; asset &#125; = hexo.theme.config;</span><br><span class="line">    for (const name in asset) &#123;</span><br><span class="line">        asset[name] = asset[name].replace(&#x27;//cdn.jsdelivr.net/npm/&#x27;, &#x27;//npm.elemecdn.com/&#x27;);</span><br><span class="line">        //asset[name] = asset[name].replace(&#x27;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-double-row-display@1.00/cardlistpost.min.css&#x27;, &#x27;https://haorblog.adhy.cc/blogimg/cardlistpost.min.css&#x27;);</span><br><span class="line">    &#125;</span><br><span class="line">    //const &#123; blog_cdn &#125; = hexo.config.butterfly_article_double_row</span><br><span class="line">    //hexo.config.butterfly_article_double_row = blog_cdn.replace(&#x27;https://cdn.jsdelivr.net/gh/Zfour/Butterfly-double-row-display@1.00/cardlistpost.min.css&#x27;, &#x27;https://haorblog.adhy.cc/blogimg/cardlistpost.min.css&#x27;);</span><br><span class="line">&#125;, 11);</span><br><span class="line"></span><br><span class="line">//通用注入器</span><br><span class="line">//name 注入插件名称</span><br><span class="line">//item_comfig 注入插件的配置名</span><br><span class="line">//temple_html_text 注入插件的挂载html模板(带有用户自定义的html/js/css)</span><br><span class="line">//js_text 注入js</span><br><span class="line">//css_text 注入css</span><br><span class="line"></span><br><span class="line">function common_injector(name, item_comfig, temple_html_text, js_text, css_text) &#123;</span><br><span class="line">    if (item_comfig.enable) &#123;</span><br><span class="line">        if (temple_html_text !== &#x27;&#x27;) &#123;</span><br><span class="line">            var layout_name;</span><br><span class="line">            var layout_type;</span><br><span class="line">            var layout_index = 0;</span><br><span class="line">            if (item_comfig.layout_id) &#123;</span><br><span class="line">                layout_name = item_comfig.layout_id;</span><br><span class="line">                layout_type = &#x27;id&#x27;;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                layout_name = item_comfig.layout.name;</span><br><span class="line">                layout_type = item_comfig.layout.type;</span><br><span class="line">                layout_index = item_comfig.layout.index;</span><br><span class="line">            &#125;</span><br><span class="line">            var get_layout</span><br><span class="line">            if (layout_type === &#x27;class&#x27;) &#123;</span><br><span class="line">                get_layout = `document.getElementsByClassName(&#x27;$&#123;layout_name&#125;&#x27;)[$&#123;layout_index&#125;]`</span><br><span class="line">            &#125; else if (layout_type === &#x27;id&#x27;) &#123;</span><br><span class="line">                get_layout = `document.getElementById(&#x27;$&#123;layout_name&#125;&#x27;)`</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                get_layout = `document.getElementById(&#x27;$&#123;layout_name&#125;&#x27;)`</span><br><span class="line">            &#125;</span><br><span class="line">            var user_info_js = `&lt;script data-pjax&gt;function $&#123;name&#125;_injector_config()&#123;</span><br><span class="line">                var parent_div_git = $&#123;get_layout&#125;;</span><br><span class="line">                var item_html = &#x27;$&#123;temple_html_text&#125;&#x27;;</span><br><span class="line">                console.log(&#x27;已挂载$&#123;name&#125;&#x27;)</span><br><span class="line">                // parent_div_git.innerHTML=item_html+parent_div_git.innerHTML // 无报错，但不影响使用(支持pjax跳转)</span><br><span class="line">                parent_div_git.insertAdjacentHTML(&quot;afterbegin&quot;,item_html) // 有报错，但不影响使用(支持pjax跳转)</span><br><span class="line">            &#125;if( $&#123;get_layout&#125; &amp;&amp; location.pathname ===&#x27;$&#123;item_comfig.enable_page&#125;&#x27;)&#123;</span><br><span class="line"></span><br><span class="line">            common_injector_config()</span><br><span class="line">        &#125; &lt;/script&gt;`</span><br><span class="line">        &#125;</span><br><span class="line">        hexo.extend.injector.register(&#x27;body_end&#x27;, user_info_js, &quot;default&quot;);</span><br><span class="line">        if (js_text !== &#x27;&#x27;) &#123;</span><br><span class="line">            hexo.extend.injector.register(&#x27;body_end&#x27;, js_text, &quot;default&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        if (css_text !== &#x27;&#x27;) &#123;</span><br><span class="line">            hexo.extend.injector.register(&#x27;head_end&#x27;, css_text, &quot;default&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.filter.register(&#x27;after_generate&#x27;,function() &#123;</span><br><span class="line">    if(hexo.config.butterfly_article_double_row_new.enable)&#123;</span><br><span class="line">        var butterfly_article_double_row_comfig = hexo.config.butterfly_article_double_row_new;</span><br><span class="line">        var css_text =`&lt;link rel=&quot;stylesheet&quot; href=&quot;https://haorblog.adhy.cc/blogimg/cardlistpost.min.css&quot;/&gt;</span><br><span class="line">&lt;style&gt;#recent-posts &gt; .recent-post-item &gt;.recent-post-info &gt; .article-meta-wrap &gt; .tags:before &#123;content:&quot;\\A&quot;;</span><br><span class="line">  white-space: pre;&#125;#recent-posts &gt; .recent-post-item &gt;.recent-post-info &gt; .article-meta-wrap &gt; .tags &gt; .article-meta__separator&#123;display:none&#125;&lt;/style&gt;</span><br><span class="line">`</span><br><span class="line"></span><br><span class="line">        common_injector(&#x27;butterfly_article_double_row&#x27;, butterfly_article_double_row_comfig, &#x27;&#x27;, &#x27;&#x27;, css_text)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果你没用<code>butterfly_article_double_row</code>的话可以把后面去掉（就是那个让文章并排排列的组件）说白了他就是引入一个css，但是我是在vercel上部署的，还要使用qexo每次部署vercel都会自己安装包，我没办法控制，所以就魔改一下写到这个文件里来改变地址了（里面的链接我已经开防盗链了，不要光想着白嫖🙂 ，只是haorblog.adhy.cc这个开了，剩下的可以放心使用都是大厂的）如果你也用<code>butterfly_article_double_row</code></p><p>那么在你主题的根目录下的配置文件里把原来的开关关掉，新增加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">butterfly_article_double_row_new:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><p>这个css的文件链接可以在你的node_modules里找到，看hexo开头的就行了，好像是hexo_butterfly_article_double_row，我也忘了🙂 ，找到以后把上面代码中的替换就行了</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记录一下第一次作业写这么晚</title>
      <link href="/2022/11/21/20221121/"/>
      <url>/2022/11/21/20221121/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="47aea7e544f426f6d0f03c71285355de01e40ac7975ebbb0e24f078eb1beb6af">8a59e14a029aa73b85cadd971e6fd24ee4daa6ea482cb01c2f199bf3f4f30001a2a46f8ff7511bc25a3b93eaed605e25443a50f9e9e7310a8aa92b25b2184604d207eb3b4d1583d54cb7d77707537309a965569fe3fb043d2d209d612f89a196b9e9456f6278ba93e8355136ba05c72208ebf3408329272e7d8575179a71b25f5a9aa4373c3abea2a8df2d02bf986413</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 我的日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次git的使用错误：error: src refspec main does not match any</title>
      <link href="/2022/11/21/git/"/>
      <url>/2022/11/21/git/</url>
      
        <content type="html"><![CDATA[<p>出现这个错误的原因基本都是git的默认分支是master，而github是main，所以需要</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -m master main</span><br></pre></td></tr></table></figure><p>来更改本地仓库分支</p><p>所以现在git上传的代码应该依次为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init # 在该文件夹中创建本地仓库</span><br><span class="line">git branch -m master main 更改本地仓库分支</span><br><span class="line">git add . # 添加该文件夹下的所有文件到本地仓库</span><br><span class="line">git commit -m &quot;first commit&quot; # 提交暂存区文件并注释</span><br><span class="line">git remote add origin 仓库地址 # 建立本地仓库与远程仓库的关联</span><br><span class="line">git pull --rebase origin main # 将远程仓库的内容合并到本地仓库的 main 分支</span><br><span class="line">git push -u origin main # 本地仓库推送到代码仓库的 main 分支</span><br></pre></td></tr></table></figure><p>或者强制覆盖远程仓库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git add . # 添加该文件夹下的所有文件到本地仓库</span><br><span class="line">git branch -m master main 更改本地仓库分支</span><br><span class="line">git commit -m &quot;first commit&quot; # 提交暂存区文件并注释</span><br><span class="line">git remote add origin 仓库地址 # 建立本地仓库与远程仓库的关联</span><br><span class="line">git push -f origin main #强制用本地代码覆盖远程仓库的 main 分支</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>语文课笔记</title>
      <link href="/2022/11/21/note_yuwen_1121/"/>
      <url>/2022/11/21/note_yuwen_1121/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="de6f5905b16bfb583a03e15e066038d27cf3b5b41aafe84c21aa0ad8735fb652"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cloudflare自选ip</title>
      <link href="/2022/11/19/cloudflare%E8%87%AA%E9%80%89ip/"/>
      <url>/2022/11/19/cloudflare%E8%87%AA%E9%80%89ip/</url>
      
        <content type="html"><![CDATA[<p>众所周知，cloudflare是不限制流量的，而且有免费套餐，所以很多站长都拿它来当作免备案cdn，但是速度有时候有点感人（晚上八点到凌晨一点）于是我今天拿cloudlfareST测试了一些节点，加上网上收集的一些节点，达到最快速度的目的，以下是测速图<br><img src="https://haorblog.adhy.cc/blogimg/cffast.PNG"><br>有时候自己测的速度可能不一样，因为cf的节点总是上蹿下跳的，不稳定，这些大多数都是anycast节点，每个线路都设置了权重，虽然不能说最快，但是也是很稳定的，在域名解析服务商那里添加一个默认解析，再添加一个解析指向cloudflare.abeginner.cn就可以使用了</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>20221119日记</title>
      <link href="/2022/11/19/20221119%E6%97%A5%E8%AE%B0/"/>
      <url>/2022/11/19/20221119%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="eb41445aca36e291307b44029e464e517b087ca7d8853b9a80d7b9257d1eb5e8">17d2b210ec5f90f053c8fe4c2c9761e21db1ae36a48b47d4bf2b1df669a1ee48b24fe587638cd888b48ae88f0dbcc7d8f9bb2043e322154fb7d824b84e8c75270669150c4b59a9e7561d06e74658c22445f20342c4413ff6eb7052324676e5ea2554175073790b84992a343629ac11279b05afabe4c87d7d2a16733f28ae4229ede5e36f47f7bd2f80e74d5b4c6b1b2f77d101afe2935ef60c783d1ea907bd99dbec61aae69628702665cd81b6f669b1be02ba85250157494810f7f23087f6ed8e940b018b4fc26402dfa292779ab5544274b6b5808bda7ec1662f3c776823e1b8ff09865b215e074f93c52f252e9aa896807d5706a373e63f2bf03274022c8d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">不想让你看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 我的日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浅谈一下免备案</title>
      <link href="/2022/11/18/%E5%85%8D%E5%A4%87%E6%A1%88/"/>
      <url>/2022/11/18/%E5%85%8D%E5%A4%87%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>备案真的好烦的，也不知道国家为什么要这样做虽然这样使网络世界更加安全，但是对于开发者来说越来越麻烦了，主要是我想备案，年龄不够还不让，要么用香港vps，要么就备案，或者用国外的cdn，半个月前我还调试了一下cloudflare里适合大陆的节点，如图<br><img src="https://haorblog.adhy.cc/blogimg/cf1.PNG"><br>虽然国内大部分区域还行，但是一到夜间（晚上八点-凌晨一点）就跟反复横跳一样，能不能连接上全靠运气，于是我想办法找人给开了个备案的子域名，套一下cdn，然后再买个顶级域名，301到备案的子域名上，这样速度和域名的便捷都实现了，用的是多吉云，速度延迟都可以，是融合cdn<br>这是我的邀请链接：<a href="https://console.dogecloud.com/register.html?iuid=4426">https://console.dogecloud.com/register.html?iuid=4426</a><br>香港vps的话，推荐openvps延迟稳定，速度还行，主要是不限流量</p>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2022/11/18日记</title>
      <link href="/2022/11/18/1118/"/>
      <url>/2022/11/18/1118/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7e577bec641f2157c08412e5314029f242d8497a82ddf6183a8dd3bdcc6d4cbb">ca6333df3c00d7aa4147c61dc087dc23c0b71bc816b3db58f66e08a02de5c4b53aefab26860a8febc5af146a7dfbbdc7778245f504552d0405e111dcfc9c64237877d156e81b7da31a79d2764ccf71ffc93a6d67045e46147199b50e24e45bd4</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">不想让你看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 我的日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于cloudflare的配置</title>
      <link href="/2022/09/26/markdown/"/>
      <url>/2022/09/26/markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h1><p><img src="https://s1.ax1x.com/2022/09/09/vq7uq0.jpg" alt="vq7uq0.jpg"></p><h3 id="这是我用hexo搭建的博客"><a href="#这是我用hexo搭建的博客" class="headerlink" title="这是我用hexo搭建的博客"></a>这是我用hexo搭建的博客</h3><h3 id="这是博客目前的速度"><a href="#这是博客目前的速度" class="headerlink" title="这是博客目前的速度"></a>这是博客目前的速度</h3><p><img src="https://s1.ax1x.com/2022/09/09/vqHvnI.md.jpg"></p><h3 id="用的是itdog"><a href="#用的是itdog" class="headerlink" title="用的是itdog"></a>用的是<a href="https://itdog.cn/">itdog</a></h3><h3 id="itdog是一个免费的工具箱特别推荐"><a href="#itdog是一个免费的工具箱特别推荐" class="headerlink" title="itdog是一个免费的工具箱特别推荐"></a>itdog是一个免费的工具箱特别推荐</h3><h3 id="原先我是用github-pages-加-hexo-框架，还有butterfly主题搭建博客的，但是呢github-pages访问贼慢，可能是时不时还访问不了，于是我打算套一个cloudflare加速，但是cloudflare加速时不时在国内真的算减速，虽然免备案也支持https和企业级邮箱，而且还免费，他在国外的速度是真的不错，基本ping的延迟都在10以内，但是由于中国国内的种种原因导致他在中国成为了减速cdn，这个问题困扰了我很久，之前直接使用改dns的方法引入cloudflare的cdn的时候，速度和丢包率刷新我的认知，甚至部分地区和联通的线路有丢包100-的，最后我在cloudflare控制台发现了一个pages选项琢磨了一段时间以后发现他跟github-pages差不多，都是免费的静态网站托管，只不过他的最大文件限制是25m，每个月可以500次上传（对于个人来说够用了），最后我用cloudflare-pages-和-腾讯云d监控还有hexo框架和butterfly主题搭建了这个博客总体来说速度还是不错的，只是联通有点慢，毕竟cloudflare里没有适用于联通的节点，下面是我收集的一些高速稳定的cloudflare节点"><a href="#原先我是用github-pages-加-hexo-框架，还有butterfly主题搭建博客的，但是呢github-pages访问贼慢，可能是时不时还访问不了，于是我打算套一个cloudflare加速，但是cloudflare加速时不时在国内真的算减速，虽然免备案也支持https和企业级邮箱，而且还免费，他在国外的速度是真的不错，基本ping的延迟都在10以内，但是由于中国国内的种种原因导致他在中国成为了减速cdn，这个问题困扰了我很久，之前直接使用改dns的方法引入cloudflare的cdn的时候，速度和丢包率刷新我的认知，甚至部分地区和联通的线路有丢包100-的，最后我在cloudflare控制台发现了一个pages选项琢磨了一段时间以后发现他跟github-pages差不多，都是免费的静态网站托管，只不过他的最大文件限制是25m，每个月可以500次上传（对于个人来说够用了），最后我用cloudflare-pages-和-腾讯云d监控还有hexo框架和butterfly主题搭建了这个博客总体来说速度还是不错的，只是联通有点慢，毕竟cloudflare里没有适用于联通的节点，下面是我收集的一些高速稳定的cloudflare节点" class="headerlink" title="原先我是用github pages 加 hexo 框架，还有butterfly主题搭建博客的，但是呢github pages访问贼慢，可能是时不时还访问不了，于是我打算套一个cloudflare加速，但是cloudflare加速时不时在国内真的算减速，虽然免备案也支持https和企业级邮箱，而且还免费，他在国外的速度是真的不错，基本ping的延迟都在10以内，但是由于中国国内的种种原因导致他在中国成为了减速cdn，这个问题困扰了我很久，之前直接使用改dns的方法引入cloudflare的cdn的时候，速度和丢包率刷新我的认知，甚至部分地区和联通的线路有丢包100%的，最后我在cloudflare控制台发现了一个pages选项琢磨了一段时间以后发现他跟github pages差不多，都是免费的静态网站托管，只不过他的最大文件限制是25m，每个月可以500次上传（对于个人来说够用了），最后我用cloudflare pages 和 腾讯云d监控还有hexo框架和butterfly主题搭建了这个博客总体来说速度还是不错的，只是联通有点慢，毕竟cloudflare里没有适用于联通的节点，下面是我收集的一些高速稳定的cloudflare节点"></a>原先我是用github pages 加 hexo 框架，还有butterfly主题搭建博客的，但是呢github pages访问贼慢，可能是时不时还访问不了，于是我打算套一个cloudflare加速，但是cloudflare加速时不时在国内真的算减速，虽然免备案也支持https和企业级邮箱，而且还免费，他在国外的速度是真的不错，基本ping的延迟都在10以内，但是由于中国国内的种种原因导致他在中国成为了减速cdn，这个问题困扰了我很久，之前直接使用改dns的方法引入cloudflare的cdn的时候，速度和丢包率刷新我的认知，甚至部分地区和联通的线路有丢包100%的，最后我在cloudflare控制台发现了一个pages选项琢磨了一段时间以后发现他跟github pages差不多，都是免费的静态网站托管，只不过他的最大文件限制是25m，每个月可以500次上传（对于个人来说够用了），最后我用cloudflare pages 和 腾讯云d监控还有hexo框架和butterfly主题搭建了这个博客总体来说速度还是不错的，只是联通有点慢，毕竟cloudflare里没有适用于联通的节点，下面是我收集的一些高速稳定的cloudflare节点</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">腾讯云的解析可以将不同线路的用户解析到不同的服务器所以只要添加好cname解析以后再添加相同记录选择不同的线路添加解析值就好</span><br><span class="line">万能节点：</span><br><span class="line">1.0.0.1他会自动匹配可以用的节点如果你不想经常调试节点或担心节点挂掉，这个节点最适合你，线路选择默认，添加记录值就好</span><br><span class="line">电信节点：（线路选择电信）</span><br><span class="line">104.23.240.*</span><br><span class="line">走英国德国荷兰等 延迟比美国高一些 适合源站在欧洲的网站</span><br><span class="line">104.16.160.*</span><br><span class="line">圣何塞的线路，比洛杉矶要快一点</span><br><span class="line">108.162.236.*</span><br><span class="line">延迟稳定，但是延迟较高</span><br><span class="line">移动节点：（线路选择移动）</span><br><span class="line">162.158.133.* </span><br><span class="line">198.41.214.*</span><br><span class="line">198.41.212.*</span><br><span class="line">198.41.208.*</span><br><span class="line">198.41.209.*</span><br><span class="line">172.64.32.*</span><br><span class="line">141.101.115.*</span><br><span class="line">172.64.0. *</span><br><span class="line">172.64.16.* </span><br><span class="line">没有啥适合联通的联通的线路，不过你可以选择cloudflare和百度云加速合作的节点:</span><br><span class="line">162.159.211.4-103</span><br><span class="line">103.21.244.0/22</span><br><span class="line">103.22.200.0/22</span><br><span class="line">103.31.4.0/22</span><br><span class="line">104.16.0.0/12</span><br><span class="line">108.162.192.0/18</span><br><span class="line">131.0.72.0/22</span><br><span class="line">141.101.64.0/18</span><br><span class="line">162.158.0.0/15</span><br><span class="line">172.64.0.0/13</span><br><span class="line">173.245.48.0/20</span><br><span class="line">188.114.96.0/20</span><br><span class="line">190.93.240.0/20</span><br><span class="line">197.234.240.0/22</span><br><span class="line">198.41.128.0/17</span><br></pre></td></tr></table></figure><h2 id="总的来说cloudflare还是不错的，毕竟人家免费而且免费的额度不得不说是真的牛逼不像国内某些厂商扣扣索索的，一上来就是收费标准，我用cloudflare在一大堆教程文档里找收费标准，好不容易找到了，说了跟没说一样，差不多可以直接记为免费，而且只要一个邮箱就能用，不像国内还要实名认证（虽然不能怪国内的企业）"><a href="#总的来说cloudflare还是不错的，毕竟人家免费而且免费的额度不得不说是真的牛逼不像国内某些厂商扣扣索索的，一上来就是收费标准，我用cloudflare在一大堆教程文档里找收费标准，好不容易找到了，说了跟没说一样，差不多可以直接记为免费，而且只要一个邮箱就能用，不像国内还要实名认证（虽然不能怪国内的企业）" class="headerlink" title="总的来说cloudflare还是不错的，毕竟人家免费而且免费的额度不得不说是真的牛逼不像国内某些厂商扣扣索索的，一上来就是收费标准，我用cloudflare在一大堆教程文档里找收费标准，好不容易找到了，说了跟没说一样，差不多可以直接记为免费，而且只要一个邮箱就能用，不像国内还要实名认证（虽然不能怪国内的企业）"></a>总的来说cloudflare还是不错的，毕竟人家免费而且免费的额度不得不说是真的牛逼不像国内某些厂商扣扣索索的，一上来就是收费标准，我用cloudflare在一大堆教程文档里找收费标准，好不容易找到了，说了跟没说一样，差不多可以直接记为免费，而且只要一个邮箱就能用，不像国内还要实名认证（虽然不能怪国内的企业）</h2>]]></content>
      
      
      <categories>
          
          <category> 经验分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>这是用qexo发布的一篇文章</title>
      <link href="/2022/09/26/test/"/>
      <url>/2022/09/26/test/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7e7f4c928c3b5319c4629f11d4cee533ba5f4e6fc788f236048bca2f06f78615">ca6333df3c00d7aa4147c61dc087dc2311d3a3974bf13a7a4942d9cc5556166e5cb4d7ff91e30f82b47d63d1a013636a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">不想让你看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 闲得无聊 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
